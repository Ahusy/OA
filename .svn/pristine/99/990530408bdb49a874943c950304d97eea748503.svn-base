package code.spxt.cn.activitys;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.common.network.FProtocol;
import com.common.viewinject.annotation.ViewInject;
import com.jcodecraeer.xrecyclerview.XRecyclerView;

import java.util.ArrayList;
import java.util.IdentityHashMap;

import code.spxt.cn.R;
import code.spxt.cn.adapters.MySubmitItemAdapter;
import code.spxt.cn.base.ToolBarActivity;
import code.spxt.cn.common.CommonConstant;
import code.spxt.cn.network.Constants;
import code.spxt.cn.network.Parsers;
import code.spxt.cn.network.entity.MySubmitItem;
import code.spxt.cn.utils.ViewInjectUtils;

import static code.spxt.cn.common.CommonConstant.REQUEST_NET_ONE;
import static code.spxt.cn.common.CommonConstant.REQUEST_NET_TWO;

/**
 * 我的申请
 */
public class MySubmitActivity extends ToolBarActivity implements View.OnClickListener {

    @ViewInject(R.id.rv_view)
    private XRecyclerView rvView;
    @ViewInject(R.id.submit_time)
    private LinearLayout timeClick;
    @ViewInject(R.id.submit_time_img)
    private ImageView imgTime;
    @ViewInject(R.id.submit_status)
    private LinearLayout statusClick;
    @ViewInject(R.id.submit_status_text)
    private TextView statusText;
    @ViewInject(R.id.rl)
    private RelativeLayout rl;

    private ArrayList<MySubmitItem> msiList = new ArrayList<>();
    private MySubmitItemAdapter msiAdapter;

    private int currentPage = 1;
    private PopupWindow popupWindow;

    public static void startMySubmitActivity(Context context) {
        Intent intent = new Intent(context, MySubmitActivity.class);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.spxt_my_submit);
        ViewInjectUtils.inject(this);
        initView();
        initData();
    }

    private void initView() {
        setCenterTitle("我的申请");
        timeClick.setOnClickListener(this);
        statusClick.setOnClickListener(this);
        rvView.setLayoutManager(new LinearLayoutManager(this));
        msiAdapter = new MySubmitItemAdapter(msiList, this);
        rvView.setAdapter(msiAdapter);
        initListener();
    }

    private void initData() {
        requestData(true);
    }

    private void initListener() {
        rvView.setLoadingListener(new XRecyclerView.LoadingListener() {
            @Override
            public void onRefresh() {
                requestData(true);
            }

            @Override
            public void onLoadMore() {
                requestData(false);
            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.submit_time:

                break;
            case R.id.submit_status:
                View contentView = LayoutInflater.from(this).inflate(R.layout.popuwindow_choose_status, null, false);
                View view = contentView.findViewById(R.id.v_view);
                view.setOnClickListener(v1 -> {
                    if (popupWindow != null) {
                        popupWindow.dismiss();
                    }
                });
                popupWindow = new PopupWindow(contentView, WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT, true);
                popupWindow.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                popupWindow.setOutsideTouchable(true);
                popupWindow.setTouchable(true);
                popupWindow.showAsDropDown(rl, 0, 0);
                break;
            case R.id.fl_layout:
                MySubmitItem msi = (MySubmitItem) v.getTag();
                int wfId = msi.getWfId();
                if (wfId == 2) {
                    ApprovalBillOutWorkActivity.startAct(this, msi.getFlowId(), msi.getStatus(), CommonConstant.STATUS_TWO);
                } else if (wfId == 4) {
                    ApprovalBillPublicCarUseActivity.startAct(this, msi.getFlowId(), msi.getStatus(), CommonConstant.STATUS_TWO);
                } else if (wfId == 5) {
                    ApprovalBillAgreementActivity.startAct(this, msi.getFlowId(), msi.getStatus(), CommonConstant.STATUS_TWO);
                } else if (wfId == 3) {
                    ApprovalBillBusinessActivity.startAct(this, msi.getFlowId(), msi.getStatus(), CommonConstant.STATUS_TWO);
                }
                break;
            case R.id.tv_cancel:
                MySubmitItem msiOne = (MySubmitItem) v.getTag();
                requestCancel(msiOne.getWfId(), msiOne.getFlowId());
                break;
        }
    }


    @Override
    protected void parseData(int requestCode, String data) {
        super.parseData(requestCode, data);
        switch (requestCode) {
            case REQUEST_NET_ONE:
                ArrayList<MySubmitItem> sList = Parsers.getSubmitList(data);
                if (sList != null && sList.size() > 0) {
                    if (currentPage == 1) {
                        msiList.clear();
                    }
                    ++currentPage;
                    msiList.addAll(sList);
                    msiAdapter.notifyDataSetChanged();
                }
                rvView.reset();
                break;
            case REQUEST_NET_TWO:
                requestData(true);
                break;
        }
    }

    private void requestData(boolean isFirst) {
        if (isFirst) {
            currentPage = 1;
        }
        IdentityHashMap<String, String> map = new IdentityHashMap<>();
        map.put(CommonConstant.PAGESIZE, CommonConstant.PAGE_SIZE_10);
        map.put(CommonConstant.PAGENUM, String.valueOf(currentPage));
        requestHttpData(Constants.Urls.URL_POST_MYAPPROVALLIST, REQUEST_NET_ONE, FProtocol.HttpMethod.POST, map);
    }

    private void requestCancel(int wfID, int id) {
        showProgressDialog();
        IdentityHashMap<String, String> map = new IdentityHashMap<>();
        map.put("wf_id", String.valueOf(wfID));
        map.put("flow_id", String.valueOf(id));
        requestHttpData(Constants.Urls.URL_POST_GOBACKFORAPPROVAL, REQUEST_NET_TWO, FProtocol.HttpMethod.POST, map);

    }

}
